# Create some random noise to add to the data
wScience.noise <- trunc(runif(437, min = -75, max = 20))
# Add the random noise the the with Science schools
wScience <- wScience + wScience.noise
# Create letter grades for schools w/Science
wScience.grade <-   ifelse(wScience >= 518, 1, #
ifelse(wScience %in% c(455:517), 2, #
ifelse(wScience %in% c(400:454), 3, #
ifelse(wScience %in% c(325:399), 4, 5))))
# Attach letter grade values to the grade vector
wScience.grade <- factor(wScience.grade, levels = c(1:5), #
labels = c("A", "B", "C", "D", "F"))
# Tabulate the percentage of letter grades
prop.table(table(wScience.grade)) * 100
# Create a vector for schools without science
woScience <- trunc(rnorm(242, mean = 300, sd = 33.43275))
# Create some random noise for these schools
woScience.noise <- trunc(runif(242, min = -58, max = 7))
# Add the random noise to the random distribution
woScience <- woScience + woScience.noise
# Create null vector for grades
woScience.grades <- rep(NA, 242)
# Create w/Science data frame
wScienceData <- as.data.frame(cbind(0, wScience, wScience.grade)
# Create w/o Science data frame
woScienceData <- as.data.frame(cbind(1, woScience, woScience.grade))
# Apply new names to both data frames
names(wScienceData) <- c("eqgroup", "totpts", "grade")
names(woScienceData) <- c("eqgroup", "totpts", "grade")
# Combine the data frames
sample <- rbind(wScienceData, woScienceData)
# Graph both of the vectors
ggplot(sample) + geom_density(aes(x = wScience, fill = wScience.grade))
# Set the random number seed
set.seed(7779311)
# Create a sample of data for 437 hypothetical schools w/Science
wScience <- trunc(rnorm(437, mean = 450, sd = 43.2759))
# Create some random noise to add to the data
wScience.noise <- trunc(runif(437, min = -75, max = 20))
# Add the random noise the the with Science schools
wScience <- wScience + wScience.noise
# Create letter grades for schools w/Science
wScience.grade <-   ifelse(wScience >= 518, 1, #
ifelse(wScience %in% c(455:517), 2, #
ifelse(wScience %in% c(400:454), 3, #
ifelse(wScience %in% c(325:399), 4, 5))))
# Attach letter grade values to the grade vector
wScience.grade <- factor(wScience.grade, levels = c(1:5), #
labels = c("A", "B", "C", "D", "F"))
# Tabulate the percentage of letter grades
prop.table(table(wScience.grade)) * 100
# Create a vector for schools without science
woScience <- trunc(rnorm(242, mean = 300, sd = 33.43275))
# Create some random noise for these schools
woScience.noise <- trunc(runif(242, min = -58, max = 7))
# Add the random noise to the random distribution
woScience <- woScience + woScience.noise
# Create null vector for grades
woScience.grades <- rep(NA, 242)
# Create w/Science data frame
wScienceData <- as.data.frame(cbind(0, wScience, wScience.grade))
# Create w/o Science data frame
woScienceData <- as.data.frame(cbind(1, woScience, woScience.grade))
# Apply new names to both data frames
names(wScienceData) <- c("eqgroup", "totpts", "grade")
names(woScienceData) <- c("eqgroup", "totpts", "grade")
# Combine the data frames
sample <- rbind(wScienceData, woScienceData)
# Graph both of the vectors
ggplot(sample) + geom_density(aes(x = wScience, fill = wScience.grade))
# Set the random number seed
set.seed(7779311)
# Create a sample of data for 437 hypothetical schools w/Science
wScience <- trunc(rnorm(437, mean = 450, sd = 43.2759))
# Create some random noise to add to the data
wScience.noise <- trunc(runif(437, min = -75, max = 20))
# Add the random noise the the with Science schools
wScience <- wScience + wScience.noise
# Create letter grades for schools w/Science
wScience.grade <-   ifelse(wScience >= 518, 1, #
ifelse(wScience %in% c(455:517), 2, #
ifelse(wScience %in% c(400:454), 3, #
ifelse(wScience %in% c(325:399), 4, 5))))
# Attach letter grade values to the grade vector
wScience.grade <- factor(wScience.grade, levels = c(1:5), #
labels = c("A", "B", "C", "D", "F"))
# Tabulate the percentage of letter grades
prop.table(table(wScience.grade)) * 100
# Create a vector for schools without science
woScience <- trunc(rnorm(242, mean = 300, sd = 33.43275))
# Create some random noise for these schools
woScience.noise <- trunc(runif(242, min = -58, max = 7))
# Add the random noise to the random distribution
woScience <- woScience + woScience.noise
# Create null vector for grades
woScience.grade <- rep(NA, 242)
# Create w/Science data frame
wScienceData <- as.data.frame(cbind(0, wScience, wScience.grade))
# Create w/o Science data frame
woScienceData <- as.data.frame(cbind(1, woScience, woScience.grade))
# Apply new names to both data frames
names(wScienceData) <- c("eqgroup", "totpts", "grade")
names(woScienceData) <- c("eqgroup", "totpts", "grade")
# Combine the data frames
sample <- rbind(wScienceData, woScienceData)
# Graph both of the vectors
ggplot(sample) + geom_density(aes(x = wScience, fill = wScience.grade))
ggplot(sample, aes(x = totpts)) + geom_density() + facet_wrap(~eqgroup)
ggplot(sample, aes(x = totpts)) + geom_density(aes(fill = grade)) + facet_wrap(~eqgroup)
ggplot(sample, aes(x = totpts)) + geom_density(aes(fill = "Grey")) + facet_wrap(~eqgroup)
ggplot(sample, aes(x = totpts)) + geom_density(aes(fill = "")) + facet_wrap(~eqgroup)
ggplot(sample, aes(x = totpts)) + geom_density() + facet_wrap(~eqgroup)
?subset
sample$pctile <- ifelse(sample$eqgroup == 0, quantile(sample$totpts[eqgroup == 0], seq(0, 1, by = .01)), #
quantile(sample$totpts[eqgroup == 1], seq(0, 1, by = .01)))
sample$pctile <- ifelse(sample$eqgroup == 0, quantile(sample$totpts[eqgroup == 0,], seq(0, 1, by = .01)), #
quantile(sample$totpts[eqgroup == 1,], seq(0, 1, by = .01)))
sample$pctile <- ifelse(sample$eqgroup == 0, quantile(sample$totpts[,eqgroup == 0], seq(0, 1, by = .01)), #
quantile(sample$totpts[,eqgroup == 1], seq(0, 1, by = .01)))
# Set the random number seed
set.seed(7779311)
# Create a sample of data for 437 hypothetical schools w/Science
wScience <- trunc(rnorm(437, mean = 450, sd = 43.2759))
# Create some random noise to add to the data
wScience.noise <- trunc(runif(437, min = -75, max = 20))
# Add the random noise the the with Science schools
wScience <- wScience + wScience.noise
# Create letter grades for schools w/Science
wScience.grade <-   ifelse(wScience >= 518, 1, #
ifelse(wScience %in% c(455:517), 2, #
ifelse(wScience %in% c(400:454), 3, #
ifelse(wScience %in% c(325:399), 4, 5))))
# Attach letter grade values to the grade vector
wScience.grade <- factor(wScience.grade, levels = c(1:5), #
labels = c("A", "B", "C", "D", "F"))
# Tabulate the percentage of letter grades
prop.table(table(wScience.grade)) * 100
# Create a vector for schools without science
woScience <- trunc(rnorm(242, mean = 300, sd = 33.43275))
# Create some random noise for these schools
woScience.noise <- trunc(runif(242, min = -58, max = 7))
# Add the random noise to the random distribution
woScience <- woScience + woScience.noise
# Create null vector for grades
woScience.grade <- rep(NA, 242)
# Create w/Science data frame
wScienceData <- as.data.frame(cbind(0, wScience, wScience.grade, quantile(wScience, seq(0, 1, by = .01))))
# Create w/o Science data frame
woScienceData <- as.data.frame(cbind(1, woScience, woScience.grade, , quantile(woScience, seq(0, 1, by = .01))))
# Apply new names to both data frames
names(wScienceData) <- c("eqgroup", "totpts", "grade", "pctile")
names(woScienceData) <- c("eqgroup", "totpts", "grade", "pctile")
# Combine the data frames
sample <- rbind(wScienceData, woScienceData)
# Graph both of the vectors
ggplot(sample, aes(x = totpts)) + geom_density(aes(fill = "Grey")) + facet_wrap(~eqgroup)
quantile(wScience, seq(0, 1, by = .01))
1/200
qplot(sleep_rem / sleep_total, awake, data = msleep)
1/50
install.packages("effects", dep = TRUE)
library("effects")
install.packages("RGraphics", dep = TRUE)
setwd("C:/Users/Billy Buchanan/Desktop/Dropbox/JSU/Fall2014/20140909/")
list.files()
exampleData <- as.data.frame(read.dta( #
"http://www.paces-consulting.org/mde/data-wrkshp4-843.dta"))
attr(exampleData)$val.labels
attr(exampleData, val.labels)
attr(exampleData, var.labels)
?attr
attr(exampleData)
attr(exampleData, "var.labels")
attr(exampleData, "val.labels")
attr(exampleData, "expansion.fields")
attr(exampleData, "formats")
attr(exampleData, "types")
apply(exampleData, class)
?apply
apply(exampleData, 2, class)
apply(names(exampleData), 1, class)
apply(names(exampleData), 2, class)
x <- names(exampleData)
?class
# Install this package if it isn't available on your computer already
# install.packages("httr", dep = TRUE)
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/"
# Create a vector for the chapters
chapters <- c(1:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Create a chapter reference
chref <- paste("chapter", i, sep = "")
print(chref)
# Create the full url
fullURL <- paste(baseURL, chref, ".html", sep = "")
print(fullURL)
# Read the file into the list
pages[[i]] <- httr::GET(url = fullURL)
} # End for loop
pages[[1]]
pages[[1]]
length(pages[[1]])
pages[[1$url]]
pages[[1]][["url"]]
pages[[1]][["content"]]
x <- readLines(pages[[1]])
x <- readLines("https://www.stat.auckland.ac.nz/~paul/RG2e/chapter1.html")
x
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/"
# Create a vector for the chapters
chapters <- c(1:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Create a chapter reference
chref <- paste("chapter", i, sep = "")
# Create the full url
fullURL <- paste(baseURL, chref, ".html", sep = "")
# Read the file into the list
pages[[i]] <- readLines(fullURL)
} # End for loop
pages[[1]]
rm(pages)
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/"
# Create a vector for the chapters
chapters <- c(1:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Create the full url
fullURL <- paste(baseURL, "chapter", i, ".html", sep = "")
# Read the file into the list
pages[[i]] <- readLines(fullURL)
} # End for loop
pages[[1]]
pages[[2]]
pages[[19]]
pages[[17]]
pages[[4]]
pages[[6]]
pages[[10]]
pages[[9]]
pages[[7]]
pages[[8]]
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/chapter"
# Create a vector for the chapters
chapters <- c(1:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Create the full url
fullURL <- paste(baseURL, i, ".html", sep = "")
print(fullURL)
# Read the file into the list
pages[[i]] <- readLines(fullURL)
} # End for loop
pages[[1]]
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/chapter"
# Create a vector for the chapters
chapters <- c(1:8, 10:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Create the full url
fullURL <- paste(baseURL, i, ".html", sep = "")
print(fullURL)
# Read the file into the list
pages[[i]] <- readLines(fullURL)
} # End for loop
pages[[1]]
x <- grep("^=.*$.R", pages[[1]], ignore.case = FALSE)
x
x <- grep("^=.*$.R", pages[[1]], ignore.case = FALSE, value = TRUE)
x
x <- grep("^href=.*$.R>", pages[[1]], ignore.case = FALSE, value = TRUE)
x
x <- grep("\<=.*$.R\>", pages[[1]], ignore.case = FALSE, value = TRUE)
?grep
x <- grep("={1}.*[.R]{1}", pages[[1]], ignore.case = FALSE, value = TRUE)
x
x <- grep("={1}.*[.]R{1}", pages[[1]], ignore.case = FALSE, value = TRUE)
x
x <- grep("^={1}.*$[.]R{1}", pages[[1]], ignore.case = FALSE, value = TRUE)
x
x <- grep("^={1}.*[.]$R{1}", pages[[1]], ignore.case = FALSE, value = TRUE)
x
x <- grep("^={1}.*[.]$R", pages[[1]], ignore.case = FALSE, value = TRUE)
x
x <- grep("\<={1}.*[.]\>R", pages[[1]], ignore.case = FALSE, value = TRUE)
x <- grep("<={1}.*[.]R>", pages[[1]], ignore.case = FALSE, value = TRUE)
x
x <- grep("<href=.*[.]R>", pages[[1]], ignore.case = FALSE, value = TRUE)
x
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/chapter"
# Create a vector for the chapters
chapters <- c(1:8, 10:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Read the file into the list
x <- readLines(paste(baseURL, i, ".html", sep = ""))
# Store only the hyperlinks to source code
pages[[i]] <- grep("={1}.*[.]R{1}", pages[[1]], ignore.case = FALSE, value = TRUE)
# Display the links to all of the source code
pages[[i]]
} # End for loop
pages[[19]]
pages[[1]]
x
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/chapter"
# Create a vector for the chapters
chapters <- c(1:8, 10:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Read the file into the list
x <- readLines(paste(baseURL, i, ".html", sep = ""))
# Store only the hyperlinks to source code
pages[[i]] <- grep("={1}.*[.]R{1}", x, ignore.case = FALSE, value = TRUE)
# Display the links to all of the source code
print(pages[[i]])
} # End for loop
x <- grep("=.*[.]R", pages[[1]], value = TRUE, ignore.case = FALSE)
x
?grepl
x <- gsub("(<tr>.*href=)|(>R code</a></td></tr>", "", x, ignore.case = FALSE)
x <- gsub("(<tr>.*href=)|(>R code</a></td></tr>)", "", x, ignore.case = FALSE)
x
x <- gsub(".*-", paste("ch", i, "-", sep = ""), pages[[i]], ignore.case = FALSE)
x
x <- gsub(".*-", paste("ch", "1", "-", sep = ""), x, ignore.case = FALSE)
x
x <- grep("=.*[.]R", pages[[1]], value = TRUE, ignore.case = FALSE)
x <- gsub("(<tr>.*href=)|(>R code</a></td></tr>)", "", x, ignore.case = FALSE)
x
x <- gsub(".*-", paste("ch", "1", "-", sep = ""), x, ignore.case = FALSE)
x
class(x)
?lapply
examples <- list(NULL)
x <- readLines(paste(baseURL, "1", ".html", sep = ""))
x
y <- grep("={1}.*[.]R{1}", x, ignore.case = FALSE, value = TRUE)
y
pages[[1]]
pages[[1]] <- gsub("(<tr>.*href=)|(>R code</a></td></tr>)", "", y, ignore.case = FALSE)
pages[[1]]
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/"
test <- lapply(pages1, function(x){url <- paste(baseURL, x, sep = "")})
test <- lapply(pages[[1]], function(x){url <- paste(baseURL, x, sep = "")})
test
?file.write
?write
?writeLines
test <- sapply(pages[[1]], function(x){url <- paste(baseURL, x, sep = "")})
test
rm(test)
pages[[1]]
baseURL
test <- sapply(pages[[1]], function(x){url <- paste(baseURL, x, sep = "")})
test
test[1]
class(test)
test[[1]]
test[2]
View(test)
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/"
# Create a vector for the chapters
chapters <- c(1:8, 10:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Create a list to store the examples from each chapter
examples <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Read the website for a given chapter into object x
x <- readLines(paste(baseURL, "chapter", i, ".html", sep = ""))
# Parse the links to the source code for the book examples
x <- grep("={1}.*[.]R{1}", x, ignore.case = FALSE, value = TRUE)
# Parse all of the extra markup around the link
pages[[i]] <- gsub("(<tr>.*href=)|(>R code</a></td></tr>)", "", x, ignore.case = FALSE)
# Create the URL to access the code examples
codeURL <- sapply(pages[[i]],                               # Store results in object codeURL
function(x){                                 # For all examples in chapter i
url <- paste(baseURL, x, sep = "")      # Append the file to the base URL
}                                            #
)
# Create name where the examples will be stored
coderef <- paste("chapter", i, sep= "")
# Read the source code for the examples
examples[[coderef]] <- lapply(codeURL, readLines)
} # End for loop
examples[[ch19]]
examples[[chapter19]]
examples[[chapter10]]
examples[[chapter1]]
examples[[ch1]]
examples[[ch1]][[intro-intro.R]]
examples[[chapter1]][[intro-intro.R]]
examples[[chapter1]]$intro-intro.R
examples$chapter1$intro-intro.R
examples$chapter1
class(examples)
examples[[1]]
examples[[2]]
# URL to get to code examples for R Graphics by Murrell
baseURL <- "https://www.stat.auckland.ac.nz/~paul/RG2e/"
# Create a vector for the chapters
chapters <- c(1:8, 10:19)
# Create a list to store each of the 19 chapter pages
pages <- list(NULL)
# Create a list to store the examples from each chapter
examples <- list(NULL)
# Loop over elements of the object x
for (i in chapters) {
# Read the website for a given chapter into object x
x <- readLines(paste(baseURL, "chapter", i, ".html", sep = ""))
# Parse the links to the source code for the book examples
x <- grep("={1}.*[.]R{1}", x, ignore.case = FALSE, value = TRUE)
# Parse all of the extra markup around the link
pages[[i]] <- gsub("(<tr>.*href=)|(>R code</a></td></tr>)", "", x, ignore.case = FALSE)
# Create the URL to access the code examples
codeURL <- sapply(pages[[i]],                               # Store results in object codeURL
function(x){                                 # For all examples in chapter i
url <- paste(baseURL, x, sep = "")      # Append the file to the base URL
}                                            #
)
# Create name where the examples will be stored
coderef <- paste("chapter", i, sep= "")
# Read the source code for the examples
examples[[coderef]] <- lapply(codeURL, readLines)
} # End for loop
?elif
?elseif
?else
??else
?if
help("if")
setwd("C:/Users/Billy Buchanan/Desktop/RGraphics/")
lapply(examples, cat, file = "RGraphics-Examples.R", append = TRUE)
cat(examples, file = "RGraphics-Examples.R", append = TRUE)
lapply(examples, writeLines, con = "RGraphicsExamples.R")
lapply(examples, writeLines, con = "RGraphicsExamples.txt")
lapply(examples, write, "RGraphicsExamples.R", append = TRUE)
?lapply
mapply(write, examples, MoreArgs = c("RGraphicsExamples.R", append = TRUE))
mapply(write, examples, MoreArgs = list(file = "RGraphicsExamples.R", append = TRUE))
?unlist
lapply(unlist(examples), write, "RGraphicsExamples.R", append = TRUE)
View(examples)
x <- unlist(examples)
x
View(x)
View(x[6000:7000])
View(x[7000:9000])
View(x)
View(x[7000:7961])
lapply(x, writeLines, con = "RGraphicsExamples.txt")
cat(x, file = "RGraphics-Examples.txt", append = TRUE)
lapply(x, cat, file = "RGraphicsExamples.txt", sep = "\n", fill = FALSE, append = TRUE)
setwd("C:/Users/Billy Buchanan/Desktop/Dropbox/JSU/Fall2014/20140916/")
source("getRGraphicsExamples.R")
getRGraphicsExamples(out = 1)
examples$chapter1
examples$chapter1$examples-stdplots.R
examples$chapter1[examples-stdplots.R]
examples$chapter1[[examples-stdplots.R]]
examples[chapter1][[examples-stdplots.R]]
examples[[chapter1]][[examples-stdplots.R]]
examples$[[chapter1]][[examples-stdplots.R]]
examples$chapter1[["examples-stdplots.R"]]
examples{{"chapter1"}}[["examples-stdplots.R"]]
examples[["chapter1"]][["examples-stdplots.R"]]
examples[["chapter1"]][["examples-chartSeries.R"]]
files.list()
file.list()
list.files()
Rscript getRGraphicsExamples.R
?list.files
exampleFiles <- list.files(pattern = "RGraphics.*.R", ignore.case = FALSE)
file.edit(exampleFiles)
firstHalf <- list.files(pattern = "RGraphics.*[1-8].R", ignore.case = FALSE)
firstHalf
firstHalf <- list.files(pattern = "RGraphics.*[1-8]{1}.R", ignore.case = FALSE)
firstHalf
firstHalf <- list.files(pattern = "RGraphics-chapter[1-8]{1}.R", ignore.case = FALSE)
firstHalf
secondHalf <- list.files(pattern = "RGraphics-chapter[1-8]{2}.R", ignore.case = FALSE)
secondHalf
file.edit(getRGraphicsExamples.R)
list.files()
file.edit("getRGraphicExamples.R")
funcfile <- "getRGraphicExamples.R"
file.edit(funcfile)
names(examples[["chapter1"]])
